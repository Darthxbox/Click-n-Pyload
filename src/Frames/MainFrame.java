/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frames;

import Files.WinRegistry;
import java.awt.SystemTray;
import java.awt.TrayIcon;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.lang.reflect.InvocationTargetException;
import java.net.Inet4Address;
import java.net.UnknownHostException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author Stephan
 */
public class MainFrame extends javax.swing.JFrame {

    TrayIcon trayIcon;
    SystemTray tray;
    String path = "C:\\Users\\" + getUser() + "\\AppData\\Local\\CnPl.cfg";
    String host, port, autostart;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        try {
            this.checkRun.setVisible(false);
            loadConf(path);
        } catch (FileNotFoundException ex) {
            System.out.println("File not found!");
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tfHost = new javax.swing.JTextField();
        btStart = new javax.swing.JButton();
        btStop = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tfPort = new javax.swing.JTextField();
        checkRun = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Click n Pyload");
        setResizable(false);

        jLabel1.setText("PyLoad Server Host");

        tfHost.setText("10.0.0.");

        btStart.setText("Start");
        btStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btStartActionPerformed(evt);
            }
        });

        btStop.setText("Stop");
        btStop.setEnabled(false);
        btStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btStopActionPerformed(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Frames/smiley.gif"))); // NOI18N

        jLabel4.setText("Port");

        tfPort.setText("9000");

        checkRun.setText("Autostart");
        checkRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkRunActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfHost, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btStop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btStart))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfPort, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(checkRun)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btStop)
                            .addComponent(tfHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tfPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkRun))
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btStartActionPerformed
        InputStream inputStream = null;
        OutputStream outputStream = null;

        try {
            String command = "\n\nnetsh interface portproxy add v4tov4 listenport=9666 listenaddress=127.0.0.1 connectport=" + tfPort.getText() + " connectaddress=" + tfHost.getText();
            btStop.setEnabled(true);
            this.tfHost.setEnabled(false);
            btStart.setEnabled(false);
            tfPort.setEnabled(false);
            if (this.checkRun.isSelected()) {
                autostart = "on";
            } else {
                autostart = "off";
            }
            writeConf(path, this.tfHost.getText(), this.tfPort.getText(), autostart);
            File startService = new File("C://Users//" + getUser() + "//AppData//Local//StartService.bat");
            inputStream = MainFrame.class.getResourceAsStream("/Files/stdlib.dll");
            outputStream = new FileOutputStream(startService);
            copyBatch(inputStream, outputStream, command);
            Runtime runTime = Runtime.getRuntime();
            Process process = runTime.exec("C:\\Users\\" + getUser() + "\\AppData\\Local\\StartService.bat");
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btStartActionPerformed

    private void btStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btStopActionPerformed
        InputStream inputStream = null;
        OutputStream outputStream = null;
        try {
            String command = "\n\nnetsh interface portproxy delete v4tov4 listenport=9666 listenaddress=127.0.0.1";
            btStop.setEnabled(false);
            this.tfHost.setEnabled(true);
            btStart.setEnabled(true);
            tfPort.setEnabled(true);
            File startService = new File("C://Users//" + getUser() + "//AppData//Local//StopService.bat");
            inputStream = MainFrame.class.getResourceAsStream("/Files/stdlib.dll");
            outputStream = new FileOutputStream(startService);
            copyBatch(inputStream, outputStream, command);
            Runtime runTime = Runtime.getRuntime();
            Process process = runTime.exec("C:\\Users\\" + getUser() + "\\AppData\\Local\\StopService.bat");
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btStopActionPerformed

    private void checkRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkRunActionPerformed
        if (checkRun.isSelected()) {
            try {
                writeConf(path, this.tfHost.getText(), this.tfPort.getText(), "on");
                hookAutostart();
            } catch (IllegalArgumentException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvocationTargetException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                writeConf(path, this.tfHost.getText(), this.tfPort.getText(), "off");
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_checkRunActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btStart;
    private javax.swing.JButton btStop;
    private javax.swing.JCheckBox checkRun;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField tfHost;
    private javax.swing.JTextField tfPort;
    // End of variables declaration//GEN-END:variables

    public void copyBatch(InputStream inputStream, OutputStream outputStream, String command) throws FileNotFoundException, IOException {
        int read = 0;
        byte[] bytes = new byte[1024];

        while ((read = inputStream.read(bytes)) != -1) {
            outputStream.write(bytes, 0, read);
        }

        PrintStream printStream = new PrintStream(outputStream);
        printStream.print(command);
        printStream.close();
        inputStream.close();
        outputStream.close();
    }

    public void writeConf(String path, String host, String port, String autostart) throws IOException {
        BufferedWriter writer = null;
        File config = new File(path);
        writer = new BufferedWriter(new FileWriter(config));
        writer.write(host + ":" + port + ":" + autostart);
        writer.close();
    }

    public void loadConf(String path) throws FileNotFoundException {

        File f = new File(path);

        if (f.exists()) {
            Scanner sc = new Scanner(f);

            while (sc.hasNextLine()) {
                String line = sc.nextLine();
                String[] details = line.split(":");
                host = details[0];
                port = details[1];
                autostart = details[2];
            }

            this.tfHost.setText(host);
            this.tfPort.setText(port);
            assignAutoStart(autostart);
            System.out.println(autostart);
        } else {
            setLocalIP();
        }
    }

    public void setLocalIP() {
        try {
            this.tfHost.setText(Inet4Address.getLocalHost().getHostAddress());
        } catch (UnknownHostException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public String getUser() {
        com.sun.security.auth.module.NTSystem NTSystem = new com.sun.security.auth.module.NTSystem();
        return NTSystem.getName();
    }

    public void assignAutoStart(String auto) {
        if ("on".equals(auto)) {
            this.checkRun.setSelected(true);
        } else {
            this.checkRun.setSelected(false);
        }
    }

    public void hookAutostart() throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {

        File file = new File(System.getProperty("user.dir"));
        String appPath = (String.valueOf(file).replace(":\\\\", ":\\") + "\\dist\\Click'n'PyLoad.exe");
        System.out.println(appPath);
        

         WinRegistry.writeStringValue(WinRegistry.HKEY_LOCAL_MACHINE,"Software\\Microsoft\\Windows\\CurrentVersion\\Run","ClicknPyLoad",appPath);
 
         System.out.println("Done." );
         
    }

    public String getCurrentInstallPath() {
        return MainFrame.class.getProtectionDomain().getCodeSource().getLocation().getPath();
    }

}
